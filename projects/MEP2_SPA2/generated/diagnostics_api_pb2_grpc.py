# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import diagnostics_api_pb2 as diagnostics__api__pb2


class DiagnosticsServiceStub(object):
  """# 0x22 read data by identinifier (Service id)
  # 0x1f90 did for vin number (Data identifier)

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendDiagnosticsQuery = channel.unary_unary(
        '/base.DiagnosticsService/SendDiagnosticsQuery',
        request_serializer=diagnostics__api__pb2.DiagnosticsRequest.SerializeToString,
        response_deserializer=diagnostics__api__pb2.DiagnosticsResponse.FromString,
        )


class DiagnosticsServiceServicer(object):
  """# 0x22 read data by identinifier (Service id)
  # 0x1f90 did for vin number (Data identifier)

  """

  def SendDiagnosticsQuery(self, request, context):
    """TODO to be implemented
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DiagnosticsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendDiagnosticsQuery': grpc.unary_unary_rpc_method_handler(
          servicer.SendDiagnosticsQuery,
          request_deserializer=diagnostics__api__pb2.DiagnosticsRequest.FromString,
          response_serializer=diagnostics__api__pb2.DiagnosticsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'base.DiagnosticsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
