# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2


class SystemServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConfiguration = channel.unary_unary(
        '/base.SystemService/GetConfiguration',
        request_serializer=common__pb2.Empty.SerializeToString,
        response_deserializer=common__pb2.Configuration.FromString,
        )
    self.ListSignals = channel.unary_unary(
        '/base.SystemService/ListSignals',
        request_serializer=common__pb2.NameSpace.SerializeToString,
        response_deserializer=common__pb2.Frames.FromString,
        )


class SystemServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetConfiguration(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListSignals(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SystemServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConfiguration': grpc.unary_unary_rpc_method_handler(
          servicer.GetConfiguration,
          request_deserializer=common__pb2.Empty.FromString,
          response_serializer=common__pb2.Configuration.SerializeToString,
      ),
      'ListSignals': grpc.unary_unary_rpc_method_handler(
          servicer.ListSignals,
          request_deserializer=common__pb2.NameSpace.FromString,
          response_serializer=common__pb2.Frames.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'base.SystemService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
